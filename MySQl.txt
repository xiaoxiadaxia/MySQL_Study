1.数据库相关概念

    数据库：DataBase（DB）

        存储数据的仓库，数据是有组织的进行存储
    
    数据库管理系统：DataBase Management System（DBMS）

        操纵和管理数据库的大型软件
    
    SQL：Structured Query Language

        操作关系型数据库的编程语言，定义了一套操作关系型数据库统一标准 

2.MySQL的启动与停止

    1.运行：

        services.msc
    
    2.命令行：

        net stop MySQL80
        net start MySQL80

3.客户端连接

    1.MySQL提供的客户端命令行工具

    2.系统自带的命令行工具执行指令

        mysql -u root -p

4.关系型数据库（RDBMS）

    概念：

        建立在关系模型基础上，由多张相互连接的二维表组成的数据库
    
    特点：  

        1.使用表存储数据，格式统一，便于维护
        2.使用SQL语言操作，标准统一，使用方便

5.SQL

    SQL通用语法：

        1.SQL语句可以单行或多行书写，以分号结尾
        2.SQL语句可以使用空格/缩进来增强语句的可读性
        3.MySQL数据库的SQL语句不区分大小写，关键字建议使用大写
        4.注释：

            1.单行注释：

                --注释内容或#注释内容（MySQL特有）
            2.多行注释：

                /*注释内容*/  

    SQL分类

        1.DDL（Data Definition Language）

                数据定义语言，用来定义数据库对象（数据库、表、字段）

                DDL数据库操作

                    1.查询
                    查询所有数据库
                    SHOW DATABASES;
                    查询当前数据库
                    SELECT DATABASE();
                    2.创建
                    CREAT DATABASE [IF NOT EXISTS] 数据库名 [DEFAULT CHARSET 字符集][CALLATE 排序规则];
                    3.删除
                    DROP DATABASE [IF EXISTS]数据库名;
                    4.使用
                    USE 数据库名;
                
                DDL-表操作-查询

                    1.查询当前数据库所有表
                    SHOW TABLES;
                    2.查询表结构
                    DESC 表名;
                    3.查询指定表的建表语句
                    SHOW CREATE TABLE 表名;
                
                DDL-表操作-创建

                    CREATE TABLE 表名{
                        字段1 字段1类型[COMMENT 字段1注释],
                        字段2 字段2类型[COMMENT 字段2注释],
                        字段3 字段3类型[COMMENT 字段3注释],
                        .....
                        字段n 字段n类型[COMMENT 字段n注释]
                    }[COMMENT 表注释];
                
                DDL-表操作-修改

                    添加字段
                    ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMEND注释][约束];
                    修改数据类型
                    ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);
                    修改字段名和数据类型
                    ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [comment 注释] [约束];
                    修改表名
                    ALTER TABLE 表名 RENAME TO 新表名;

                DDL-表操作-删除

                    删除表
                    DROP TABLE [IF EXISTS] 表名;
                    删除指定表，并重新创建该表
                    TRUNCATE TABLE 表名;

                
                DDL-数据类型

                    TINYINT 1byte 小整数值
                    SMALLINT 2bytes 大整数值
                    MEDIUMINT 3bytes 大整数值
                    INT或INTEGER 4bytes 大整数值
                    BIGINT 8bytes 极大整数值
                    FLOAT 4bytes 单精度浮点数值
                    DOUBLE 8bytes 双精度浮点数值
                    DECIMAL 小数值（精确定点数）依赖于M（精度）和D（标度）的值 123.45 M=5 D=2
                    CHAR 255bytes 定长字符串 性能较好
                    VARCHAR 65535bytes 变长字符串 性能较差
                    TINYBLOG 255bytes 不超过255个字符的二进制数据
                    BLOG 65535bytes 二进制形式的长文本数据
                    MEDIUMBLOG 16777215bytes 二进制形式的中等长度文本数据
                    LONGBLOG 4294967295bytes 二进制形式的极大文本数据
                    TINYTEXT 255bytes 短文本字符串
                    TEXT 65535bytes 长文本数据
                    MEDIUMTEXT 16777215bytes 中等长度文本数据
                    LONGTEXT 4294967295bytes 极大文本数据
                    DATE 日期值
                    TIME 时间值或持续时间
                    YEAR 年份值
                    DATETIME 混合日期和时间值
                    TIMESTAMP 混合日期和时间值，时间戳
                    


        2.DML（Data Manipulation Language）

                数据操作语言，用来对数据库表中的数据进行增删改

                添加数据(INSERT)
                    
                    1.给指定字段添加数据 

                        INSERT INTO 表名 (字段名1,字段名2,...) VALUES(值1,值2,...);
                    2.给全部字段添加数据

                        INSERT INTO 表名 VALUES(值1,值2,...);
                    3.批量添加数据

                        INSERT INTO 表名 (字段名1,字段名2,...) VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);
                        INSERT INTO 表名 VALUES(值1,值2,...),(值1,值2,...),(值1,值2,...);

                    注：

                        1.插入数据时，指定的字段顺序需要与值的顺序是一一对应的。
                        2.字符串和日期型数据应该包含在引号中。
                        3.插入的数据大小，应该在字段的规定范围内。
                修改数据(UPDATE)
                    
                    UPDATE 表名 SET 字段名1=值1,字段名2=值2,...[WHERE 条件];
                    
                    注：

                        修改语句的条件可以有，也可以没有，如果没有条件，则会修改整张表的所有数据。
                删除数据(DELETE)

                    DELETE FROM 表名[WHERE 条件]

                    注：

                        1.DELETE语句的条件可以有，也可以没有，如果没有条件则会删除整张表的所有数据
                        2.DELETE语句不能删除某一个字段的值（可以使用UPDATE）


        3.DQL（Data Query Language）

                数据查询语言，用来查询数据库中表的记录

                SELECT 字段列表                                                 4

                    1.查询多个字段

                        SELECT 字段1,字段2,字段3...FROM 表名;
                        SELECT*FROM 表名;
                    2.设置别名

                        SELECT 字段1[AS 别名1],字段2[AS 别名2]...FROM 表名;
                    3.去除重复记录

                        SELECT DISTINCT 字段列表 FROM 表名;
                FROM 表名列表                                                   1
                WHERE 条件列表                                                  2
                    
                    比较运算符

                        >
                        >=
                        <
                        <=
                        =
                        <>或!=
                        BETWEEN...AND...    在某个范围内（含最小、最大值）
                        IN(...) 在in之后的列表中的值，多选一
                        LIKE占位符  模糊匹配（_匹配单个字符，%匹配任意个字符）
                        IS NULL     是NULL
                    逻辑运算符

                        AND或&&
                        OR或||
                        NOT或!
                GROUP BY 分组字段列表                                           3

                    SELECT 字段列表 FROM 表名 [WHERE 条件] GROUP BY 分组字段名 [HAVING 分组后过滤条件];

                    WHERE和HAVING区别

                        1.执行时机不同：

                            WHERE是分组之前进行过滤，不满足WHERE条件，不参与分组；
                            而HAVING是分组之后对结果进行过滤；
                        2.判断条件不同：

                            where不能对聚合函数进行判断，而having可以
                    
                    注：

                        1.执行顺序：WHERE >聚合函数 >HAVING
                        2.分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义
                HAVING 分组后条件列表                                            5
                ORDER BY 排序字段列表                                            6

                    SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1,字段2 排序方式2;

                    排序方式：

                        1.ASC：升序（默认值）
                        2.DESC：降序

                    注：

                        如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序
                LIMIT 分页参数                                                  7

                    SELECT 字段列表 FROM 表名 LIMIT 起始索引,查询记录数;

                    注：

                        1.起始索引从0开始，起始索引=（查询页码-1）*每页显示记录数。
                        2.分页查询是数据库的方言，不同的数据库有不同的实现，MySQL中是LIMIT。
                        3.如果查询的是第一页数据，起始索引可以省略，直接简写为LIMIT 10; 
                
                聚合函数

                    将一列数据作为一个整体，进行纵向计算

                    count 统计数量
                    max 最大值
                    min 最小值
                    avg 平均值
                    sum 求和

                    SELECT 聚合函数(字段列表) FROM 表名;

                    注：

                        null值不参与所有聚合函数运算
        4.DCL（Data Control Language）

                数据控制语言，用来创建数据库用户、控制数据库的访问权限

                DCL-用户管理

                1.查询用户
                USE mysql;
                SELECT * FROM user;

                2.创建用户
                CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';

                3.修改用户密码
                ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';

                4.删除用户
                DROP USER '用户名'@'主机名';

                注：    

                    1.主机名可以使用%通配
                    2.这类SQL开发人员操作的比较少，主要是DBA（Datebase Administrator 数据库管理员）使用

                DCL-权限控制

                1.查询权限
                SHOW GRANTS FOR '用户名'@'主机名';

                2.授予权限
                GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';

                3.撤销权限
                REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';

                注：

                    1.多个权限之间，使用逗号分隔
                    2.授权时，数据库名和表名可以使用*进行通配，代表所有


5.函数

    函数是指一段可以直接被另一段程序调用的程序或代码

    1.字符串函数

        1.CONCAT(S1,S2,...Sn)
        字符串拼接，将S1,S2,...Sn拼接成一个字符串
        2.LOWER(str)
        将字符串str全部转为小写
        3.UPPER(str)
        将字符串str全部转为大写
        4.LPAD(str,n,pad)
        左填充，用字符串pad对str的左边进行填充，达到n个字符串长度
        5.RPAD(str,n,pad)
        右填充，用字符串pad对str的右边进行填充，达到n个字符串长度
        6.TRIM(str)
        去掉字符串头部和尾部的空格
        7.SUBSTRING(str,start,len)
        返回从字符串str从start位置起的len个长度的字符串

    2.数值函数

        1.CEIL(x)
        向上取整
        2.FLOOR(x)
        向下取整
        3.MOD(x,y)
        返回x/y的模
        4.RAND()
        返回0~1内的随机数
        5.ROUND(x,y)
        求参数x四舍五入的值，保留y位小数

    3.日期函数

        1.CURDATE()
        返回当前日期
        2.CURTIME()
        返回当前时间
        3.NOW()
        返回当前日期和时间
        4.YEAR(DATE)
        获取指定日期的年份
        5.MONTH(date)
        获取指定日期的月份
        6.DAT(date)
        获取指定date的日期
        7.DATE_ADD(date,INTERVALexpr type)
        返回一个日期/时间值加上一个时间间隔expr后的时间值
        8.DATEDIFF(date1,date2)
        返回起始时间date1和结束时间date2之间的天数

    4.流程函数

        1.IF(value,t,f)
        如果value为true，则返回t，否则返回f
        2.IFNULL(value1.value2)
        如果value1不为空，返回value1，否则返回value2
        3.CASE WHEN [val1] THEN[res1]...ELSE[default]END
        如果val1为true，返回res1，...否则返回default默认值
        4.CASE [expr] WHEN [val1] THEN [res1]...ELSE[DEFAULT]END
        如果expr的值等于val1，返回res1，...否则返回default默认值

6.约束

    概念：  

        约束是作用于表中字段上的规则，用于限制存储在表中的数据
    目的：

        保证数据库中的数据正确、有效性和完整性 
    分类：

        1.非空约束
        限制该字段的数据不能为null
        NOT NULL
        2.唯一约束
        保证该字段的所有数据都是唯一、不重复的
        UNIQUE
        3.主键约束
        主键是一行数据的唯一标识，要求非空且唯一
        PRIMARY KEY
        4.默认约束
        保存数据时，如果未指定该数据的值，则采用默认值
        DEFAULT
        5.检查约束（8.0.16版本之后）     
        保证字段值满足某一个条件    
        CHECK
        6.外键约束
        用来让两张表的数据之间建立连接，保证数据的一致性和完整性
        FOREIGN KEY

        添加外键
        CREATE TABLE 表名(
            字段名 数据类型,
            ...
            [CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)
        );
        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名);

        删除外键
        ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;

        删除/更新行为

        NO ACTION
        当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与RESTRICT一致）
        
        RESTRICT
        当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除/更新。（与NO ACTION 一致）

        CASCADE
        当在父表中删除/更新对应记录时，首先检查该记录是否有对应外键，如果有，则也删除/更新外键在子表中的记录

        SET NULL
        当在父表中删除对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为null（这就要求该外键允许取null）

        SET DEFAULT
        父表有变更时，子表将外键列设置成一个默认的值（Innodb不支持）

        ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE CASCADE ON DELETE CASCADE;
        注：

            约束是作用于表中字段上的，可以在创建表/修改表的时候添加约束                                                                                                 

7.多表查询

    